package org.myEncuesta.persistence.hibernate;
// Generated Apr 3, 2017 10:52:47 AM by Hibernate Tools 5.2.1.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Questions generated by hbm2java
 */
@Entity
@Table(name = "Questions", schema = "dbo", catalog = "myEncuesta")
public class Questions implements java.io.Serializable {

	private Integer id;
	private Pages pages;
	private String question;
	private Set<Responses> responseses = new HashSet<Responses>(0);
	private Set<QuestionFields> questionFieldses = new HashSet<QuestionFields>(0);

	public Questions() {
	}

	public Questions(Pages pages) {
		this.pages = pages;
	}

	public Questions(Pages pages, String question, Set<Responses> responseses, Set<QuestionFields> questionFieldses) {
		this.pages = pages;
		this.question = question;
		this.responseses = responseses;
		this.questionFieldses = questionFieldses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Pages_id", nullable = false)
	public Pages getPages() {
		return this.pages;
	}

	public void setPages(Pages pages) {
		this.pages = pages;
	}

	@Column(name = "question")
	public String getQuestion() {
		return this.question;
	}

	public void setQuestion(String question) {
		this.question = question;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "questions")
	public Set<Responses> getResponseses() {
		return this.responseses;
	}

	public void setResponseses(Set<Responses> responseses) {
		this.responseses = responseses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "questions")
	public Set<QuestionFields> getQuestionFieldses() {
		return this.questionFieldses;
	}

	public void setQuestionFieldses(Set<QuestionFields> questionFieldses) {
		this.questionFieldses = questionFieldses;
	}

}
